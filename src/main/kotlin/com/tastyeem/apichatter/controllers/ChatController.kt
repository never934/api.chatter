package com.tastyeem.apichatter.controllersimport com.tastyeem.apichatter.models.db.Chatimport com.tastyeem.apichatter.models.db.ChatMessageimport com.tastyeem.apichatter.models.db.ChatRequestimport com.tastyeem.apichatter.models.db.Userimport com.tastyeem.apichatter.models.request.AuthRequestimport com.tastyeem.apichatter.models.request.ChatMessageRequestimport com.tastyeem.apichatter.models.request.UserRequestimport com.tastyeem.apichatter.models.view.AuthViewimport com.tastyeem.apichatter.repository.ChatMessageRepositoryimport com.tastyeem.apichatter.repository.ChatRepositoryimport com.tastyeem.apichatter.repository.ChatRequestRepositoryimport com.tastyeem.apichatter.repository.UserRepositoryimport com.tastyeem.apichatter.utils.SecurityUtilsimport com.tastyeem.apichatter.utils.TimeUtilsimport com.tastyeem.apichatter.utils.TokenUtilsimport io.swagger.annotations.Apiimport io.swagger.annotations.ApiOperationimport org.springframework.http.HttpStatusimport org.springframework.http.ResponseEntityimport org.springframework.web.bind.annotation.*import java.util.*@RestController()@RequestMapping("/v1/chats")@Api(value = "Auth", description = "user chats")class ChatController(val chatRepository: ChatRepository, val chatMessageRepository: ChatMessageRepository) {    @RequestMapping(method = [RequestMethod.GET])    @ApiOperation(value = "chats of user")    fun getChats(@RequestHeader("Authorization") token: String) : ResponseEntity<List<Chat>> {        return ResponseEntity.ok().body(chatRepository.findAll().filter { it.userIds.contains(TokenUtils().getTokenUserId(token))})    }    @RequestMapping(method = [RequestMethod.GET], value = ["/{chatId}"])    @ApiOperation(value = "chat messages")    fun getChatMessages(@RequestHeader("Authorization") token: String, @PathVariable chatId: String) : ResponseEntity<List<ChatMessage>> {        val chat = chatRepository.findById(chatId)        val userId = TokenUtils().getTokenUserId(token)        if(chat.get().userIds.contains(userId)){            return ResponseEntity.ok().body(chatMessageRepository.findAll().filter { it.chatId.toString() == chatId })        }else{            return ResponseEntity(HttpStatus.BAD_REQUEST)        }    }    @RequestMapping(method = [RequestMethod.POST], value = ["/{chatId}"])    @ApiOperation(value = "add chat message")    fun addChatMessage(@RequestHeader("Authorization") token: String, @PathVariable chatId: String, @RequestBody message: ChatMessageRequest) : ResponseEntity<List<ChatMessage>> {        val chat = chatRepository.findById(chatId)        val userId = TokenUtils().getTokenUserId(token)        if(chat.get().userIds.contains(userId)){            val time = TimeUtils().getUnixTime()            chatMessageRepository.save(                ChatMessage(                    id = UUID.randomUUID().toString(),                    chatId = chatId,                    message = message.message,                    userId = userId ?: UUID.randomUUID().toString(),                    createdDate = time,                    updatedDate = time                )            )            return ResponseEntity.ok().body(chatMessageRepository.findAll().filter { it.chatId.toString() == chatId })        }else{            return ResponseEntity(HttpStatus.BAD_REQUEST)        }    }}